# -*- coding: utf-8 -*-
"""
Created on Fri Dec 24 07:50:31 2021

@author: user
"""
from collections import defaultdict
from queue import PriorityQueue
class Graph:
    def __init__(self): 
        self.graph =  defaultdict(list)

    def add_edge(self, u, v, weight):
            value = (weight, v)
            self.graph[u].append(value)
            value = (weight, u)
            self.graph[v].append(value)

    def ucs(self, current_node, goal_node):
        #It takes starting node and 
        #goal node as parameters then it returns 
        #a path using Uniform Cost Search Algorithm
       
        visited = []
        path = []
        queue = PriorityQueue()
        queue.put((0, current_node))
        
        while not queue.empty():
            item = queue.get()
            current_node =  item[1]
            
            if current_node == goal_node:
                path.append([current_node, item[0]])
                
                # clear all values from queue
                queue.queue.clear()
            
            else:
                   # if start place is already present in visited
                   # then take another place
                   if current_node not in visited:
                       path.append([current_node, item[0]])
                       visited.append(current_node)
    
                       for neighbour in self.graph[current_node]:
                            queue.put((neighbour[0], neighbour[1]))
            
        return path
